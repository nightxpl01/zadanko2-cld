name: Z2 - Build and Push Docker Image

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-push:
    name: Build, Scan and Push Image
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      id-token: write

    env:
      IMAGE_NAME: ghcr.io/nightxpl01/zadanko1-cld
      CACHE_IMAGE: ${{ format('docker.io/{0}/zadanko1-cache:latest', secrets.DOCKERHUB_USERNAME) }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Install Docker Scout CLI
      run: |
        curl -sSfL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh -s -- -b /usr/local/bin

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Log in to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build temp image (single arch) for scanning
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        load: true
        platforms: linux/amd64 
        tags: ${{ env.IMAGE_NAME }}:temp
        cache-from: type=registry,ref=${{ env.CACHE_IMAGE }}
        cache-to: type=registry,ref=${{ env.CACHE_IMAGE }},mode=max

    - name: Scan image for CVEs using Docker Scout
      run: |
        docker-scout cves ${{ env.IMAGE_NAME }}:temp --format sarif --output cve-results.sarif
        SEVERITY_COUNT=$(docker-scout cves ${{ env.IMAGE_NAME }}:temp --format json | grep -E '"severity":"(high|critical)"' | wc -l)
        echo "Found $SEVERITY_COUNT high/critical vulnerabilities"
        test "$SEVERITY_COUNT" -eq 0

    - name: Push image to GHCR (only if scan passed)
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ env.IMAGE_NAME }}:latest
        platforms: linux/amd64,linux/arm64
        cache-from: type=registry,ref=${{ env.CACHE_IMAGE }}
        cache-to: type=registry,ref=${{ env.CACHE_IMAGE }},mode=max
